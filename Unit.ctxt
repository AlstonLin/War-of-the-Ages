#BlueJ class context
comment0.target=Unit
comment0.text=\r\n\ Handles\ the\ basic\ features\ that\ all\ Units\ will\ have,\ mainly\ pathfinding.\r\n\r\n\ @author\ Alston\ Lin,\ Daniel\ Chung,\ James\ Ly,\ Jesmin\ Hondell,\ Koko\ Deng\r\n\ @version\ 1.0\r\n
comment1.params=owner\ cell\ map
comment1.target=Unit(Player,\ Cell,\ Map)
comment1.text=\r\n\ Creates\ a\ new\ Unit;\ this\ should\ only\ be\ called\ from\ a\ subclass.\r\n\r\n\ @param\ cell\ \ \ \ \ \ The\ Cell\ that\ the\ unit\ will\ spawn\ in\r\n\ @param\ map\ \ \ \ \ \ \ The\ Map\ that\ this\ will\ be\ put\ in\r\n
comment10.params=unit
comment10.target=void\ selectUnit(Unit)
comment10.text=\r\n\ When\ the\ user\ selects\ the\ Unit\ to\ go\ to\ a\ specific\ unit\:\r\n\ -\ the\ selected\ unit\ is\ set\ as\ a\ target\r\n\ -\ the\ unit\ is\ classified\ 'following',\ i.e.\ it\ is\ tracking\ another\ unit\r\n\ -\ a\ path\ is\ calculated\ to\ the\ unit\ \ \ \r\n\ Will\ ignore\ multiple\ selections\ of\ the\ same\ unit.\r\n\ \r\n\ @param\ unit\ \ \ \ \ \ The\ unit\ that\ is\ to\ be\ set\ as\ a\ destination\r\n
comment11.params=map
comment11.target=void\ calculateNewLocation(Map)
comment11.text=\r\n\ Calculates\ the\ new\ position\ of\ this\ Unit\ after\ the\ map\ has\ changed.\r\n\r\n\ @param\ \ \ \ \ \ \ The\ map\ that\ this\ Unit\ is\ in\r\n
comment12.params=percentChange\ map
comment12.target=void\ resize(double,\ Map)
comment12.text=\r\n\ Resizes\ the\ Unit\ and\ repositions\ it\ approriately\ based\ on\ the\ percent\r\n\ changed.\r\n\r\n\ @param\ percentChange\ \ \ \ \ The\ percent\ of\ the\ size\ of\ the\ new\ map\ compared\ to\r\n\ the\ old\ map\r\n\ @param\ map\ \ \ \ \ \ \ The\ Map\ that\ this\ Unit\ is\ in\r\n
comment13.params=map\ image
comment13.target=void\ updateImage(Map,\ greenfoot.GreenfootImage)
comment13.text=\r\n\ Updates\ the\ image\ according\ to\ the\ current\ map\ zoom.\r\n\r\n\ @param\ map\ \ \ \ \ \ \ The\ Map\ that\ this\ Unit\ is\ in\r\n\ @param\ image\ \ \ \ \ The\ GreenfootImage\ that\ this\ Unit\ will\ appear\ as\r\n
comment14.params=
comment14.target=void\ findPath()
comment14.text=\r\n\ Creates\ a\ path\ using\ Breadth\ First\ Search\ to\ the\ given\ cell;\ attempts\ to\r\n\ find\ the\ shortest\ possible\ path,\ or\ throws\ an\ IllegalStateException\ if\r\n\ not\ possible.\r\n\r\n\ @throws\ NoPossiblePathException\ \ \ \ \ \ The\ Cell\ cannot\ be\ reached\r\n\ @throws\ IllegalArgumentException\ \ \ \ \ The\ destination\ Cell\ deos\ not\ exist\r\n\ @throws\ NoPossiblePathException\ \ \ \ \ \ There\ is\ no\ possible\ path\ to\ the\ given\ Cell\r\n
comment15.params=
comment15.target=void\ travelPath()
comment15.text=\r\n\ Travels\ on\ the\ set\ path.\ If\ this\ unit\ is\ chasing\ a\ moving\ unit,\ \r\n\ the\ path\ is\ refreshed\ every\ few\ frames\ (pathfinderRefreshRate).\r\n\ If\ there\ are\ obstructions,\ the\ path\ will\ be\ reworked.\r\n
comment16.params=cell
comment16.target=void\ travelToCell(Cell)
comment16.text=\r\n\ Travels\ towards\ the\ given\ Cell.\r\n\ \r\n\ @param\ cell\ \ \ \ \ \ The\ Cell\ to\ move\ towards\r\n
comment17.params=x\ y
comment17.target=void\ updateHiding(int,\ int)
comment17.text=\r\n\ Updates\ whether\ or\ not\ the\ Unit\ should\ be\ hidden\r\n\r\n\ @param\ x\ \ \ \ \ The\ x\ coordinate\ in\ pixels\ relative\ to\ the\ screen\r\n\ @param\ y\ \ \ \ \ The\ y\ coordinate\ in\ pixels\ relative\ to\ the\ screen\r\n
comment18.params=xChange\ yChange
comment18.target=void\ move(int,\ int)
comment18.text=\r\n\ Moves\ this\ Unit\ the\ given\ x\ and\ y\ changes\ and\ applies\ it\r\n\ safely.\r\n\ \r\n\ @param\ xChange\ \ \ \ \ \ \ the\ change\ in\ pixels\ on\ the\ x\ axis\r\n\ @param\ yChange\ \ \ \ \ \ \ the\ change\ in\ pixels\ on\ the\ y\ axis\r\n
comment19.params=targetOfInterest
comment19.target=void\ fireProjectile(greenfoot.Actor)
comment19.text=\r\n\ Fires\ a\ projectile\ to\ the\ target\r\n\ \r\n\ @param\ targetOfInterest\ \ \ the\ target\ of\ the\ attack\r\n
comment2.params=
comment2.target=void\ act()
comment2.text=\r\n\ Called\ before\ every\ frame\ is\ rendered;\ every\ Unit's\ automatic\r\n\ behavior\:\r\n\ Moves\ to\ new\ cell\ if\ free\ cell\ is\ available\r\n\ Empties\ the\ old\ cell\ to\ make\ it\ traversable\r\n
comment20.params=unit
comment20.target=void\ slaughterByStanders(Unit)
comment20.text=\r\n\ Checks\ to\ see\ if\ the\ unit\ selected\ is\ an\ enemy,\ and\ if\ so,\ attack\r\n\ \r\n\ @param\ unit\ \ \ \ \ \ The\ Unit\ that\ will\ be\ attacked\r\n
comment21.params=
comment21.target=greenfoot.GreenfootImage\ getLeftImage()
comment21.text=\r\n\ Returns\ the\ image\ of\ the\ Unit\ facing\ left\r\n\ \r\n\ @return\ \ \ \ \ \ A\ refrence\ to\ the\ original\ image\ of\ this\ Unit\ facing\ left\ (can\ be\ shared)\r\n
comment22.params=
comment22.target=greenfoot.GreenfootImage\ getRightImage()
comment22.text=\r\n\ Returns\ the\ image\ of\ the\ Unit\ facing\ right\r\n\ \r\n\ @return\ \ \ \ \ \ A\ refrence\ to\ the\ original\ image\ of\ this\ Unit\ facing\ right\ (can\ be\ shared)\r\n
comment23.params=
comment23.target=greenfoot.GreenfootImage\ getFrontImage()
comment23.text=\r\n\ Returns\ the\ image\ of\ the\ Unit\ facing\ front\r\n\ \r\n\ @return\ \ \ \ \ \ A\ refrence\ to\ the\ original\ image\ of\ this\ Unit\ facing\ front\ (can\ be\ shared)\r\n
comment24.params=
comment24.target=greenfoot.GreenfootImage\ getBackImage()
comment24.text=\r\n\ Returns\ the\ image\ of\ the\ Unit\ facing\ back\ (Away\ from\ screen)\r\n\ \r\n\ @return\ \ \ \ \ \ A\ refrence\ to\ the\ original\ image\ of\ this\ Unit\ facing\ back\ (can\ be\ shared)\r\n
comment25.params=
comment25.target=HealthBar\ getHealthBar()
comment25.text=\r\n\ Returns\ the\ health\ bar\ of\ this\ Unit\r\n\ \r\n\ @return\ The\ health\ bar\ of\ this\ Unit\r\n
comment26.params=
comment26.target=double\ getCurrentHealth()
comment26.text=\r\n\ Returns\ the\ current\ health\ of\ the\ Unit\r\n\ \r\n\ @return\ \ \ \ \ \ The\ remaining\ health\ of\ the\ unit\r\n
comment27.params=
comment27.target=double\ getMeleeArmour()
comment27.text=\r\n\ Returns\ the\ Unit's\ resistance\ to\ melee\ damage\r\n\ \r\n\ @return\ \ \ \ \ \ The\ Unit's\ resistance\ to\ melee\ damage\r\n
comment28.params=
comment28.target=double\ getRangedArmour()
comment28.text=\r\n\ Returns\ the\ Unit's\ resistance\ to\ ranged\ damage\r\n\ \r\n\ @return\ \ \ \ \ \ The\ unit's\ resistance\ to\ ranged\ damage\r\n
comment29.params=
comment29.target=double\ getSiegeArmour()
comment29.text=\r\n\ Returns\ the\ Unit's\ resistance\ to\ siege\ damage\r\n\ \r\n\ @return\ \ \ \ \ \ The\ Unit's\ resistance\ to\ siege\ damage\r\n
comment3.params=
comment3.target=void\ attack()
comment3.text=\r\n\ Attacks\ the\ target\ if\ the\ attack\ timer\ is\ up\r\n
comment30.params=
comment30.target=int\ getRange()
comment30.text=\r\n\ Returns\ the\ Unit's\ range\ of\ attack\r\n\ \r\n\ @return\ \ \ \ \ \ The\ unit's\ range\ of\ attack\r\n
comment31.params=
comment31.target=int\ getAttackSpeed()
comment31.text=\r\n\ Returns\ the\ Unit's\ attacking\ frequency\r\n\ \r\n\ @return\ \ \ \ \ \ The\ Unit's\ attacking\ frequency\ (counted\ in\ turns)\r\n
comment32.params=
comment32.target=double\ getMeleeInfantryMultiplier()
comment32.text=\r\n\ Returns\ the\ Unit's\ attack\ multiplier\ (for\ melee\ infantry\ types)\r\n\ \r\n\ @return\ \ \ \ \ \ The\ Unit's\ attack\ multiplier\ when\ striking\ melee\ infantry\ types\r\n
comment33.params=
comment33.target=void\ arrive()
comment33.text=\r\n\ What\ happens\ when\ the\ Unit\ arrives\ at\ the\ destination\ Cell\r\n
comment34.params=
comment34.target=double\ getRangedInfantryMultiplier()
comment34.text=\r\n\ Returns\ the\ Unit's\ attack\ multiplier\ (for\ ranged\ infantry\ types)\r\n\ \r\n\ @return\ \ \ \ \ \ The\ Unit's\ attack\ multiplier\ when\ striking\ ranged\ infantry\ types\r\n
comment35.params=
comment35.target=double\ getMeleeCavalryMultiplier()
comment35.text=\r\n\ Returns\ the\ unit's\ attack\ multiplier\ (melee\ cavalry\ types)\r\n\ \r\n\ @return\ \ \ \ \ \ The\ unit's\ attack\ multiplier\ when\ striking\ melee\ cavalry\ types\r\n
comment36.params=
comment36.target=double\ getRangedCavalryMultiplier()
comment36.text=\r\n\ Returns\ the\ unit's\ attack\ multiplier\ (for\ ranged\ cavalry\ types).\r\n\ \r\n\ @return\ \ \ \ \ \ The\ unit's\ attack\ multiplier\ when\ striking\ ranged\ cavalry\ types\r\n
comment37.params=
comment37.target=double\ getSiegeMultiplier()
comment37.text=\r\n\ Returns\ the\ unit's\ attack\ multiplier\ (for\ striking\ siege\ types).\r\n\ \r\n\ @return\ \ \ \ \ \ The\ unit's\ attack\ multiplier\ when\ striking\ siege\ types\r\n
comment38.params=
comment38.target=double\ getBuildingMultiplier()
comment38.text=\r\n\ Returns\ the\ unit's\ attack\ multiplier\ (for\ striking\ buildings).\r\n\ \r\n\ @return\ \ \ \ \ \ The\ unit's\ attack\ multiplier\ when\ striking\ buildings\r\n
comment39.params=
comment39.target=int\ getType()
comment39.text=\r\n\ Returns\ the\ type\ to\ which\ a\ selected\ unit\ belongs.\r\n\ \r\n\ @return\ \ \ \ \ \ The\ type\ to\ which\ a\ selected\ unit\ belongs\r\n
comment4.params=object
comment4.target=void\ clientAttack(java.lang.Object)
comment4.text=\r\n\ Attacks\ the\ given\ Building\ or\ Unit.\ Should\ be\ used\r\n\ for\ multiplayer\ clients\ only.\r\n\ \r\n\ @param\ object\ The\ target\ of\ the\ attack\r\n
comment40.params=
comment40.target=java.lang.String\ getUnit()
comment40.text=\r\n\ Returns\ the\ name\ of\ a\ selected\ unit.\r\n\ \r\n\ @return\ \ \ \ \ \ The\ name\ of\ a\ selected\ unit\r\n
comment41.params=
comment41.target=int\ getAbsX()
comment41.text=\r\n\ Returns\ the\ absolute\ x\ coordinate\ of\ this\ unit\r\n\ \r\n\ @return\ \ \ \ \ \ The\ absolute\ x\ coordinate\ of\ this\ unit\r\n
comment42.params=
comment42.target=int\ getAbsY()
comment42.text=\r\n\ Returns\ the\ absolute\ y\ coordinate\ of\ this\ unit\r\n\ \r\n\ @return\ \ \ \ \ \ The\ absolute\ y\ coordinate\ of\ this\ unit\r\n
comment43.params=
comment43.target=Cell\ getCell()
comment43.text=\r\n\ Returns\ the\ cell\ of\ this\ unit\r\n\ \r\n\ @@return\ \ \ \ \ The\ cell\ of\ this\ unit\r\n
comment44.params=
comment44.target=Player\ getOwner()
comment44.text=\r\n\ Returns\ the\ owner\ of\ this\ unit\r\n\ \r\n\ @return\ \ \ \ \ \ The\ owner\ of\ this\ Unit\r\n
comment45.params=
comment45.target=Cell\ getCurrentCell()
comment45.text=\r\n\ Returns\ the\ cell\ that\ this\ Unit\ is\ on\r\n\ \r\n\ @return\ \ \ \ \ \ The\ Cell\ that\ this\ Unit\ is\ on\r\n
comment46.params=
comment46.target=boolean\ isHidden()
comment46.text=\r\n\ Returns\ the\ variable\ hidden\r\n\ \r\n\ @return\ \ \ \ \ \ True\ if\ it\ is\ hidden\r\n
comment47.params=
comment47.target=int\ getID()
comment47.text=\r\n\ Returns\ the\ ID\ of\ this\ Unit\r\n\ \r\n\ @return\ \ \ \ \ \ The\ ID\ of\ this\ Unit\r\n
comment48.params=
comment48.target=int\ getGoldCost()
comment48.text=\ \r\n\ Returns\ amount\ of\ gold\ needed\ to\ spawn\ unit\r\n\ \r\n\ @return\ \ \ \ \ \ amount\ of\ gold\ needed\ to\ spawn\ unit\r\n
comment49.params=
comment49.target=int\ getWoodCost()
comment49.text=\r\n\ Returns\ amount\ of\ wood\ needed\ to\ spawn\ unit\r\n\ \r\n\ @return\ \ \ \ \ \ amount\ of\ wood\ needed\ to\ spawn\ unit\r\n
comment5.params=damage
comment5.target=void\ takeDamage(double)
comment5.text=\r\n\ Deducts\ the\ given\ damage\ from\ this\ unit's\r\n\ hitpoints.\ Unit\ is\ destroyed\ if\ out\ of\ hitpoints\r\n\ \r\n\ @param\ \ damage\ \ \ Amount\ of\ damage\r\n\ @param\ \ type\ \ \ \ \ Type\ of\ damage\r\n
comment50.params=
comment50.target=int\ getFoodCost()
comment50.text=\r\n\ Returns\ amount\ of\ food\ needed\ to\ spawn\ unit\r\n\ \r\n\ @return\ \ \ \ \ \ amount\ of\ food\ needed\ to\ spawn\ unit\r\n
comment51.params=
comment51.target=boolean\ isSpawned()
comment51.text=\r\n\ Returns\ if\ this\ Unit\ is\ currently\ spawned\r\n\ \r\n\ @return\ \ \ \ \ \ If\ this\ Unit\ is\ currently\ spawned\r\n
comment52.params=ID
comment52.target=void\ setID(int)
comment52.text=\r\n\ Sets\ the\ ID\ of\ the\ Unit\r\n\ \r\n\ @param\ ID\ \ \ \ \ \ \ \ The\ new\ ID\ of\ this\ Unit\r\n
comment53.params=path
comment53.target=void\ setPath(java.util.LinkedList)
comment53.text=\r\n\ Sets\ the\ path\ of\ the\ Cell\r\n\ \r\n\ @param\ path\ \ \ \ \ \ The\ new\ path\ of\ this\ Cell\r\n
comment54.params=spawned
comment54.target=void\ setSpawned(boolean)
comment54.text=\r\n\ Sets\ the\ spawned\r\n\ \r\n\ @param\ spawned\ \ \ The\ new\ value\ of\ spawn\r\n
comment55.params=
comment55.target=Unit\ getTarget()
comment55.text=\r\n\ Returns\ the\ current\ target\ of\ this\ Unit\r\n\ \r\n\ @return\ \ \ \ \ \ The\ current\ target\ of\ this\ Unit\r\n
comment56.params=
comment56.target=Building\ getTargetBuilding()
comment56.text=\r\n\ Returns\ the\ current\ Building\ that\ this\ Unit\ is\ targeting\r\n\ \r\n\ @return\ The\ current\ Building\ that\ this\ Unit\ is\ targeting\r\n
comment6.params=
comment6.target=double\ calculateDamageToInflict()
comment6.text=\r\n\ Calculates\ the\ damage\ that\ the\ unit\ will\ deal\ to\ its\ current\ target,\ by\ multiplying\r\n\ its\ base\ attack\ by\ the\ multiplier\ associated\ with\ the\ enemy's\ type.\r\n\ \r\n\ @return\ \ \ \ \ \ The\ amount\ of\ damage\ that\ is\ to\ be\ dealt\ on\ the\ unit's\ current\ target\r\n
comment7.params=
comment7.target=int\ getTeam()
comment7.text=\r\n\ Returns\ the\ number\ of\ units\r\n\ \r\n\ @return\ \ \ \ \ \ The\ unit's\ team\r\n
comment8.params=
comment8.target=double\ getHealth()
comment8.text=\r\n\ Returns\ the\ maximum\ health\ of\ the\ unit\r\n\ \r\n\ @return\ \ \ \ \ \ The\ maximum\ health\ of\ the\ unit\r\n
comment9.params=cell
comment9.target=void\ selectCell(Cell)
comment9.text=\r\n\ When\ the\ user\ selects\ the\ Unit\ to\ go\ to\ a\ specific\ Cell\:\r\n\ -\ the\ selected\ cell\ is\ set\ as\ a\ target\r\n\ -\ the\ unit\ is\ classified\ '\!following',\ i.e.\ it\ is\ not\ tracking\ another\ unit\r\n\ -\ a\ path\ is\ calculated\ to\ the\ cell\r\n\ Will\ ignore\ multiple\ selections\ of\ the\ same\ cell.\r\n\ \r\n\ @param\ cell\ \ \ \ \ \ The\ cell\ that\ is\ to\ be\ set\ as\ a\ destination\r\n
numComments=57
