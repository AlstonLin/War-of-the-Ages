#BlueJ class context
comment0.params=x\ y\ cellSize
comment0.target=Cell(int,\ int,\ int)
comment0.text=\r\n\ Constructor\ for\ the\ Cell\ object.\ Sets\ the\ size,\ and\ location\r\n\ \r\n\ @param\ x\ \ \ \ \ \ \ \ \ The\ x\ index\ of\ the\ cell\ on\ the\ map\r\n\ @param\ y\ \ \ \ \ \ \ \ \ The\ y\ index\ of\ the\ cell\ on\ the\ map\r\n\ @param\ cellSize\ \ The\ size\ of\ each\ side\ \r\n
comment1.params=
comment1.target=greenfoot.GreenfootImage\ getOriginalImage()
comment1.text=\r\n\ Returns\ a\ refrence\ to\ the\ highest\ resolution\ image\ of\ \r\n\ this\ Cell\ (can\ be\ shared)\r\n\ \r\n\ @return\ \ \ \ \ \ A\ refrence\ to\ the\ highest\ resolution\ image\ of\ \r\n\ this\ Cell\ (can\ be\ shared)\r\n
comment10.params=toRemove\ toAdd
comment10.target=void\ replaceNeighbour(Cell,\ Cell)
comment10.text=\r\n\ Replaces\ a\ neighbour\ with\ another\ when\ a\ Cell\ has\ changed.\ \r\n\ \r\n\ @param\ toRemove\ \ \ \ \ \ the\ Cell\ to\ remove\r\n\ @param\ toAdd\ \ \ \ \ \ \ \ \ the\ Cell\ that\ will\ replace\ the\ other\r\n
comment11.params=
comment11.target=void\ destroy()
comment11.text=\r\n\ Changes\ the\ Cell\ back\ to\ grass.\r\n
comment12.params=neighbour
comment12.target=void\ addNeighbour(Cell)
comment12.text=\r\n\ Adds\ a\ neighbour\ of\ the\ Cell\ for\ pathfinding\ purposes\r\n\ \r\n\ @param\ neighbour\ \ \ \ \ The\ Cell\ that\ is\ directly\ adjacent\ (above/below/beside)\ to\ this\ Cell\r\n
comment13.params=parent
comment13.target=void\ visit(Cell)
comment13.text=\r\n\ Should\ only\ be\ called\ from\ the\ pathfinding\ algorithm;\ visits\r\n\ the\ Cell\ in\ BFS\ with\ the\ given\ parent\ Cell.\r\n\ \r\n\ @param\ parent\ \ \ \ \ \ \ \ The\ Cell\ that\ that\ comes\ before\ this\ one\r\n
comment14.params=t
comment14.target=void\ setTraversable(boolean)
comment14.text=\r\n\ Sets\ if\ the\ unit\ is\ traversable\r\n\ \r\n\ @param\ t\ \ \ \ \ True\ if\ unit\ is\ traversable\r\n\ @return\ \ \ \ \ \ If\ the\ unit\ is\ traversable\r\n
comment15.params=
comment15.target=java.util.LinkedList\ getNeighbours()
comment15.text=\r\n\ Returns\ a\ list\ of\ all\ the\ cells\ directly\ adjacent\ to\ this\ Cell\r\n\ \r\n\ @return\ \ \ \ \ \ A\ list\ of\ all\ the\ cells\ directly\ adjacent\ to\ (directly\ above/below/beside)\ \r\n\ this\ Cell\r\n
comment16.params=stream
comment16.target=void\ readObject(java.io.ObjectInputStream)
comment16.text=\r\n\ Called\ during\ deserialization\ to\ restore\ transient\ fields.\r\n\ \r\n\ @param\ stream\ \ \ \ The\ input\ stream\ given\ during\ deserialization\r\n
comment17.params=
comment17.target=boolean\ getVisited()
comment17.text=\r\n\ Returns\ is\ the\ Cell\ was\ visited\ by\ pathfinding\r\n\ \r\n\ @return\ \ \ \ \ \ If\ the\ Cell\ was\ visited\ by\ pathfinding\r\n
comment18.params=
comment18.target=boolean\ isTraversable()
comment18.text=\r\n\ Returns\ if\ the\ unit\ is\ traversable\r\n\ \r\n\ @return\ \ \ \ \ \ If\ the\ unit\ is\ traversable\r\n
comment19.params=
comment19.target=Cell\ getParent()
comment19.text=\r\n\ Returns\ the\ parent\ of\ this\ Cell\ stored\ from\ pathfinding\r\n\ \r\n\ @return\ \ \ \ \ \ The\ parent\ of\ this\ Cell\ stored\ from\ pathfinding\r\n
comment2.params=game
comment2.target=void\ resetPathfinding(Game)
comment2.text=\r\n\ Resets\ the\ pathfinding\ variables\ once\ it's\ finished\ \r\n\ \r\n\ @param\ game\ \ \ \ \ \ The\ Game\ in\ which\ the\ Cells\ are\ contained\ in\r\n
comment3.params=original\ copy
comment3.target=void\ copyCellData(Cell,\ Cell)
comment3.text=\r\n\ Copys\ important\ data\ from\ one\ Cell\ to\ another\ to\ prepare\r\n\ for\ replacement.\r\n\ \r\n\ @param\ original\ \ \ \ \ \ The\ original\ Cell\ to\ copy\ from\r\n\ @param\ copy\ \ \ \ \ \ \ \ \ \ The\ replacement\ Cell\ to\ copy\ to\r\n
comment4.params=map
comment4.target=void\ calculateNewLocation(Map)
comment4.text=\r\n\ Calculates\ the\ new\ location\ of\ the\ cell\ on\ the\ World\ \r\n\ when\ the\ user\ has\ scrolled\ the\ map.\ Culls\ the\ image\ if\r\n\ it\ will\ not\ be\ visible\r\n\ \r\n\ @param\ map\ \ \ \ \ \ \ The\ Map\ that\ this\ will\ be\ placed\ in\r\n
comment5.params=side
comment5.target=void\ resize(int)
comment5.text=\r\n\ Scales\ the\ image\ of\ the\ Cell\ to\ the\ given\ side\ for\ both\r\n\ dimentions,\ if\ it\ is\ within\ the\ legal\ range.\ \r\n\ \r\n\ @param\ side\ \ \ \ \ \ The\ dimention\ of\ each\ side\ of\ the\ Cell\ \r\n
comment6.params=
comment6.target=int\ getMapX()
comment6.text=\r\n\ Returns\ the\ x\ coordinate\ of\ this\ Cell\r\n\ \r\n\ @return\ \ \ \ \ \ The\ x\ coordinate\ of\ this\ Cell\ on\ the\ Map\r\n
comment7.params=
comment7.target=int\ getMapY()
comment7.text=\r\n\ Returns\ the\ y\ coordinate\ of\ this\ Cell\r\n\ \r\n\ @return\ \ \ \ \ \ The\ y\ coordinate\ of\ this\ Cell\ on\ the\ Map\r\n
comment8.params=map
comment8.target=int\ getAbsoluteX(Map)
comment8.text=\r\n\ Calculates\ the\ absolute\ value\ of\ the\ x\ coordinate\ in\ pixels\ relative\ to\ the\ Map\r\n\ \r\n\ @param\ map\ \ \ \ \ \ \ The\ Map\ that\ the\ Cell\ is\ contained\ in\ \r\n\ @return\ \ \ \ \ \ \ \ \ \ The\ absolute\ x\ coordinate\ in\ pixels\ relative\ to\ the\ Map\r\n
comment9.params=map
comment9.target=int\ getAbsoluteY(Map)
comment9.text=\r\n\ Calculates\ the\ absolute\ value\ of\ the\ y\ coordinate\ in\ pixels\ relative\ to\ the\ Map\r\n\ \r\n\ @param\ map\ \ \ \ \ \ \ The\ Map\ that\ the\ Cell\ is\ contained\ in\ \r\n\ @return\ \ \ \ \ \ \ \ \ \ The\ absolute\ y\ coordinate\ in\ pixels\ relative\ to\ the\ Map\r\n
numComments=20
